trigger:
- master

resources:
- repo: self

variables:
  imageRepo: soh-pimcore
  tag: latest

parameters:
  - name: customerID
    displayName: customer ID
    type: string
    default: 'shangai45'
  - name: customerCompanyName
    displayName: customer company name
    type: string
    default: 'PIPPOSRL'
  - name: subscriptionPlan
    displayName: subscription plan
    type: string
    default: 'basic'
  - name: startDate
    displayName: start date
    type: string
    default: '1-1-2022'
  - name: finishDate
    displayName: finish date
    type: string
    default: '31-12-2022'
  - name: dbUser
    displayName: db User
    type: string
    default: admin01@analyticserver01
  - name: dbServer
    displayName: db Server
    type: string
    default: analyticserver01.mysql.database.azure.com
  - name: dbPassword
    displayName: db Password
    type: string
    default: Analisidati01    

stages:
- stage: Build
  displayName: Build image
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: ubuntu-latest
    steps:
#    - task: Docker@2
#      displayName: Build an image
#      inputs:
#        containerRegistry: 'DeployPOC-container registry'
#        repository: '$(imageRepo)'
#        command: 'buildAndPush'
#        Dockerfile: '$(Build.SourcesDirectory)/app/Dockerfile'
#        tags: |
#          $(tag)
#          latest
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)/s/kubernetes'
        artifact: 'manifests'
        publishLocation: 'pipeline'
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Pipeline.Workspace)/s/dump'
        artifact: 'dump'
        publishLocation: 'pipeline'
        
- stage: Deploy
  displayName: Deploy to Dev
  dependsOn: Build
  variables:
    acrsecret: k8sexamplesacrauth
    acrdevurl: 'sintrasohregistry.azurecr.io'
    customResponse: 'Hello world ${{parameters.customerID}}'
    host: ${{parameters.dbServer}}
    user: ${{parameters.dbUser}}
    password: ${{parameters.dbPassword}}
    tenant: ${{parameters.customerID}}
    externalip: '0.0.0.0'
  jobs:
    - job: Deploy
      displayName: Deploy to AKS
      pool:
        vmImage: ubuntu-latest
      steps:
      - task: AzureMysqlDeployment@1
        inputs:
          azureSubscription: 'deployPOC-ARM'
          ServerName:  '$(host)'
          SqlUsername:  '$(user)'
          SqlPassword:  '$(password)'
          TaskNameSelector: 'InlineSqlTask'
          SqlInline: |
            DROP DATABASE IF EXISTS $(tenant);
            CREATE DATABASE $(tenant);
          IpDetectionMethod: 'AutoDetect'
      #- task: AzureCLI@2
      #  inputs:
      #    azureSubscription: 'deployPOC-ARM'
      #    scriptType: 'pscore'
      #    scriptLocation: 'inlineScript'
      #    inlineScript: 'az mysql server create --resource-group ${{parameters.customerID}}ResourceGroup --name ${{ parameters.customerID }}mysqlserverdiprova --location westus --admin-user myadminprova --admin-password SintraOH01!1!!1 --sku-name GP_Gen5_2'
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'dump'
          targetPath: '$(Pipeline.Workspace)/dump'
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: 'mysql -h $(host) -u $(user) --password=$(password) $(tenant) < $(Pipeline.Workspace)/dump/pimcore.sql'                  
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          artifactName: 'manifests'
          targetPath: '$(Pipeline.Workspace)/manifests'
      - task: Kubernetes@1
        inputs:
          connectionType: 'Kubernetes Service Connection'
          kubernetesServiceEndpoint: 'deployPOC-Kubernetes'
          command: 'create'
          arguments: 'namespace $(tenant)'
          secretType: 'dockerRegistry'
          containerRegistryType: 'Azure Container Registry'
      - task: KubernetesManifest@0
        inputs:
          action: 'createSecret'
          kubernetesServiceConnection: 'deployPOC-Kubernetes'
          namespace: 'default'
          secretType: 'dockerRegistry'
          secretName: '$(acrsecret)'
          dockerRegistryEndpoint: 'DeployPOC-SOH container registry'

      - task: replacetokens@5
        displayName: Replace Tokens
        inputs:
          rootDirectory: '$(Pipeline.Workspace)/manifests/'
          targetFiles: 'deployment.yml'
          encoding: 'auto'
          tokenPattern: 'custom'
          tokenPrefix: '#'
          tokenSuffix: '#'
          writeBOM: true
          actionOnMissing: 'warn'
          keepToken: false
          actionOnNoFiles: 'continue'
          enableTransforms: false
          useLegacyPattern: false
          enableTelemetry: true
      - task: replacetokens@5
        displayName: Replace Tokens
        inputs:
          rootDirectory: '$(Pipeline.Workspace)/manifests/'
          targetFiles: 'service.yml'
          encoding: 'auto'
          tokenPattern: 'custom'
          tokenPrefix: '#'
          tokenSuffix: '#'
          writeBOM: true
          actionOnMissing: 'warn'
          keepToken: false
          actionOnNoFiles: 'continue'
          enableTransforms: false
          useLegacyPattern: false
          enableTelemetry: true
      - task: KubernetesManifest@0
        inputs:
          action: 'deploy'
          kubernetesServiceConnection: 'deployPOC-Kubernetes'
          namespace: 'default'
          manifests: |
            $(Pipeline.Workspace)/manifests/deployment.yml
            $(Pipeline.Workspace)/manifests/service.yml
          containers: '$(acrdevurl)/$(imageRepo):$(tag)'
          imagePullSecrets: '$(acrsecret)'
      - task: KubectlInstaller@0
        inputs:
          kubectlVersion: 'latest'
      - task: Kubernetes@1
        name: 'externalipextractor'
        inputs:
          connectionType: 'Kubernetes Service Connection'
          kubernetesServiceEndpoint: 'deployPOC-Kubernetes'
          command: 'get'
          arguments: 'services --namespace default'
          secretType: 'dockerRegistry'
          containerRegistryType: 'Azure Container Registry'
          outputFormat: jsonpath= '{.items[?(.spec.selector.app=="$(tenant)")].status.loadBalancer.ingress[0].ip}'
      
  #    - task: PowerShell@2
  #      inputs:
  #        targetType: 'inline'
  #        script: |    
  #          Write-Output '$(externalipextractor.KubectlOutput)'
  #    - task: PowerShell@2
  #      displayName: 'Trim unnecessary quotes'
  #      inputs:
  #        targetType: 'inline'
  #        script: |
  #          Write-Output "##vso[task.setvariable variable=paperino]$externalipextractor.KubectlOutput"
  #    - task: PowerShell@2
  #      inputs:
  #        targetType: 'inline'
  #        script: |    
  #          Write-Output '$(paperino)'
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'deployPOC-ARM'
          scriptType: 'pscore'
          scriptLocation: 'inlineScript'
          inlineScript: 'az network dns record-set a add-record -g MC_myapp-rg_myapp_westeurope -z a307f4c659704a0cb7d4.westeurope.aksapp.io -n $(tenant) -a $(externalipextractor.KubectlOutput)'
      
      
      

      

  


